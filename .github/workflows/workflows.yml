name: Docker Image CI/CD

on:
  schedule:
    # Run once a week (Sunday at midnight)
    - cron: '0 0 * * 0'
  push:
    branches: [ master, main ]
  workflow_dispatch:
    # Allow manual execution

jobs:
  # Job to build and push to Docker Hub on each commit
  build-and-push:
    runs-on: ubuntu-latest
    # Execute only on push
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/yum-s3-docker:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job to verify and apply security updates
  security-check:
    runs-on: ubuntu-latest
    # Execute only on schedule (cron) or workflow_dispatch
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Download the latest image from the registry to check for updates
      - name: Pull latest image from registry
        run: |
          docker pull ${{ secrets.DOCKER_REGISTRY }}/yum-s3-docker:latest
          # If the image doesn't exist, define a flag to force build
          if [ $? -ne 0 ]; then
            echo "Latest image not found in registry, will build new image"
            echo "force_build=true" >> $GITHUB_OUTPUT
          fi
        id: pull-image
        continue-on-error: true

      # Verify if there are security updates available in the current image
      - name: Check for security updates
        id: check-updates
        if: steps.pull-image.outcome == 'success' && steps.pull-image.outputs.force_build != 'true'
        run: |
          CONTAINER_ID=$(docker run -d --rm ${{ secrets.DOCKER_REGISTRY }}/yum-s3-docker:latest microdnf check-update --security)
          sleep 5
          UPDATES=$(docker logs $CONTAINER_ID)
          docker stop $CONTAINER_ID || true
          
          if echo "$UPDATES" | grep -q "Security"; then
            echo "Security updates available"
            echo "updates_available=true" >> $GITHUB_OUTPUT
          else
            echo "No security updates available"
            echo "updates_available=false" >> $GITHUB_OUTPUT
          fi

      # Rebuild and publish the image if security updates are available or if the image doesn't exist
      - name: Build and push updated image
        if: steps.pull-image.outputs.force_build == 'true' || steps.check-updates.outputs.updates_available == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/yum-s3-docker:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
